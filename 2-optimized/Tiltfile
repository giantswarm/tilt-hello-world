# We can use local caches like the go compiler cache or the go mod cache if we build our app locally.
# Our Docker image doesn't need go tooling if we build locally.

# Let's configure a new Tilt resource to manage the compilation of our app.
# The `local_resource` function configures commands to run on the host machine.
# Tilt performs an update on local resources on `tilt up` and whenever any of their `deps` change.
local_resource(
  'example-go-compile',
  'CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/tilt-example-go ./',
  deps=['./main.go'])

# We can optimize our image building by passing the `only` parameter, which is a set of file paths that should be considered for the build.
# All other changes will not trigger a build and will not be included in images.
# Like a reverse `.dockerignore` file.
# Compiling our binary into the `build` folder will trigger this resource.
docker_build(
  'example-go-image',
  '.',
  dockerfile='deployments/Dockerfile',
  only=[
    './build/tilt-example-go',
    './web',
  ])

# Finally, our old good friends.
k8s_yaml('deployments/kubernetes.yaml')
k8s_resource('example-go', port_forwards=8000,
             resource_deps=['example-go-compile'])
